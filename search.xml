<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Ubuntu16.04安装matlab]]></title>
    <url>%2Fposts%2Fc730e2ef%2F</url>
    <content type="text"><![CDATA[参考教程：http://lanbing510.info/2014/12/03/Linux-Matlab.html除此之外，Readme.txt这份文件也很重要！！！！ matlab版本：R2014a(8.3) matlab下载：https://pan.baidu.com/s/1qYJ9tNm#list/path=%2F matlab安装1.part1.rar 和 part2.rar 两个压缩包下载后，解压part1.rar即可得到 matlab 的iso镜像文件 命令：rar x …part1.rar 2.ubuntu使用iso文件，需先挂载，新建一个挂载文件夹 sudo mkdir /usr/local/matlab2014 2.挂载 sudo mount -o loop /home/hongxin/Documents/matlab2014/MATHWORKS_R2014A.iso /usr/local/matlab2014&ensp; 3.解挂 sudo umount /usr/local/matlab2014 4.进入 /usr/local/matlab2014 文件夹，安装matlab sudo ./install 5.执行命令后会弹出安装窗口5.1 点击“使用文件安装密钥“5.2 填写Readme.txt的密钥：12345-67890-12345-678905.3 一路默认5.4 把crack的license文件拷贝到/usr/local5.5 选择此 license 激活文件 6.破解6.1 将crack文件夹下的libmwservices.so copy到 /usr/local/MATLAB/R2014a/bin/glnxa64 7.启动 cd /usr/local/MATLAB/R2014a/bin./matlab 8.疑问crack下的install.jar的作用：貌似是windows安装matlab用到的http://jingyan.baidu.com/article/eae07827a466a31fed548563.html 9.将matlab执行路径添加到环境变量打开环境配置文件 sudo gedit /etc/profile 添加以下内容 source /etc/profile]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux防火墙与端口]]></title>
    <url>%2Fposts%2Fa8ec0ca7%2F</url>
    <content type="text"><![CDATA[在Liunx中，主要由 iptables 来管理防火墙和各种端口。其实就是在写各种规则。 外网服务器和内网服务器的区别外网（广域网）： 由世界上的千万电脑组成的网络，所以别人可以访问你的外网服务器。比如183.232.231.172内网（局域网）： 由你自己的几台（个人），几十台（公司），几千台（学校）组成的网络，不在这个网络计算机的无法访问内网服务器。比如192.168.1.1网关： 外网与内网的中介，既有内网的IP地址，又有外网的IP地址，两个IP地址分别捆绑在不同的网卡上。所以网关既可以访问内网又可以访问内网。当内网服务器192.168.1.1 想访问外网服务器183.232.231.172时，就会把外网的IP发给网关，网关与外网取得联系后再把数据发回给内网。路由： 本质上就是网关。DNS: （Domain Name System，域名系统）因特网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过主机名，最终得到该主机名对应的IP地址的过程叫做域名解析（或主机名解析） 参考http://blog.csdn.net/w124374860/article/details/52641851https://zhidao.baidu.com/question/1050628014291855339.htmlhttps://www.cnblogs.com/keyi/p/5948302.html 端口映射端口映射就是将外网主机的IP地址的一个端口映射到内网中一台机器，提供相应的服务。当用户访问该IP的这个端口时，服务器自动将请求映射到对应局域网内部的机器上。这样做可以避免全部服务器都暴露在外网中，不容易受到入侵。 在Linux中，端口映射常用 iptables 这个工具（其实是我只知道这个工具），关于这个工具的用法，可以看下面这篇文章。iptables超全详解 关于具体步骤参考下面的文章Linux下配置iptables实现外网访问内网KMS服务器Centos6.5下端口映射操作 端口映射涉及的文件/etc/rc.d/init.d :rc.d = runlevel control directory大多数的Linux 发行版本中，启动脚本都被放在/etc/rc.d/init.d。这些脚本被ln 命令来连接到 /etc/rc.d/rcn.d 目录。(这里的n 就是运行级0-6)例如/etc/rc.d/rc2.d 下面的S10network 就是连接到/etc/rc.d/init.d下的network 脚本的。http://blog.csdn.net/wy19910326/article/details/7355013 /etc/sysconfig/iptables:https://jingyan.baidu.com/article/f96699bbe90f8e894e3c1bda.html /etc/sysctl.conf: &ensp;主机名与IP/etc/hosts :主机名和IP配置文件, 记录主机名与IP的对应关系。打开后，一般可以看到两行，其中 127.0.0.1 表示ipv4的本机地址，而::1表示的时ipv6的本机地址 查看主机名 hostname # 第一种uname -n # 第二种，uname用来输出系统信息，uname –help 查看更多信息 参考http://blog.csdn.net/xiaoshubiao/article/details/17283649 防火墙https://www.awaimai.com/1650.html]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Centos7装机总结]]></title>
    <url>%2Fposts%2F1e7d71dd%2F</url>
    <content type="text"><![CDATA[装机过程图文版（记得联网，装桌面可以看下面的装桌面教程）http://blog.csdn.net/panda_52panda/article/details/73770146 yum 和 rpm区别https://zhidao.baidu.com/question/1690520549857824868.html 装桌面：https://www.cnblogs.com/c-xiaohai/p/6509641.html ln命令解释http://man.linuxde.net/ln 桌面定制（从文章的第三步开始）总参考文章： http://m.blog.csdn.net/panda_52panda/article/details/73770146 第一步sudo yum install -y epel-releasesudo yum -y install liberation-mono-fontssudo yum -y install gnome-menussudo yum -y install gnome-tweak-toolsudo yum -y install gnome-shell # 教程写漏了 installsudo yum -y install gnome-shell-extension-* # 这里教程也写错了 第二步装扩展工具，推荐下面几个：链接: https://pan.baidu.com/s/1nwM4i1b 密码: pnt5Dash To Dock : Dock图标栏Dynamic Top Bar: 顶栏透明效果dynamic-panel-transparency ：透明化顶部状态栏nohotcorner: 禁止左上角的热键 第三步，隐藏顶部栏和底部栏（隐藏顶部栏貌似输入法会失效）http://www.cnblogs.com/pinnsvin/p/5471479.html 桌面定制的其他参考文章http://blog.csdn.net/hobohero/article/details/54381552 装chrome浏览器http://blog.csdn.net/u010472499/article/details/72327963 将用户xxx加入sudoers组（如果在装机过程将xxx设置为管理员就不用）http://blog.csdn.net/swnjut/article/details/61199951 sudo 执行命令免密码 xxx ALL=(ALL) NOPASSWD: ALL google科学上网先安装python3http://baijiahao.baidu.com/s?id=1580087400169490317&amp;wfr=spider&amp;for=pc yum install -y https://centos7.iuscommunity.org/ius-release.rpmyum updateyum install -y python35u python35u-libs python35u-devel python35u-pip&ensp;# 安装好后更改执行程序的名字，便于敲命令cd /usr/binsudo ln -s pip3.5 pip3sudo ln -s python3.5 python3 (如果没有 ius-release.rpm，可在这里下载链接：https://pan.baidu.com/s/1gfTRGbD 密码：g80h ) 安装shadowsockhttp://blog.csdn.net/u013309540/article/details/74330305 (要将ssserver 换成 sslocal)http://blog.csdn.net/onlyellow/article/details/52021429 centos7 创建服务http://blog.csdn.net/u013309540/article/details/74330305 更换镜像源(centos + PyPI)centos https://mirrors.scau.edu.cn/mirrors-help/centos.htmlPyPI: 更换 pip 镜像源需先切换到 root 用户下，因为你安装包的时候是用 root 用户执行的 无法挂载ntfs磁盘 sudo yum -y install ntfs-3g安装好再点击磁盘即可打开 开机自动挂载http://www.linuxidc.com/Linux/2014-11/109226.htm 安装pycharm1 下载安装包并解压2 cd pycharm-community-2016.3.3/bin3 sudo vim pycharm.sh4 在Run the IDE 上面添加 三条 export 语句 (解决无法输入中文，pycharm版本可能要低一点，我用的是2016.3.3)5 运行 pycharm.sh 安装gcc sudo yum install gcchttp://www.linuxidc.com/Linux/2017-03/142319.htm 安装git yum install git redis sudo yum install redis -y 安装锐捷mentohusthttp://m.blog.csdn.net/DAMN_damn/article/details/57639118 安装shutterhttps://baijiahao.baidu.com/s?id=1572193682556704&amp;wfr=spider&amp;for=pc 安装smplayer必须先安装nux-dextop-release-0-5.el7.nux.noarch.rpm yum install smplayer 禁用SELinuxhttp://blog.51cto.com/bguncle/957315 配置弹出终端的快捷键 &ensp;配置终端的颜色 centos 备份与还原（tar 备份）http://blog.csdn.net/yuanfang_way/article/details/54383616http://blog.csdn.net/tham_/article/details/50402109 终端ssh连接服务器，空闲时间自动断开连接 的解决办法http://blog.csdn.net/sandyloo/article/details/74979817 装wps sudo cp mtextra.ttf wingding.ttf symbol.ttf WINGDNG2.ttf WINGDNG3.ttf WEBDINGS.TTF /usr/share/fonts 装libreofficehttp://blog.csdn.net/fk002008/article/details/50378154 下载：http://mirrors.ustc.edu.cn/tdf/libreoffice/stable/]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[解决Ubuntu16.04和win10时间不同步]]></title>
    <url>%2Fposts%2F3c93276%2F</url>
    <content type="text"><![CDATA[先在ubuntu下更新一下时间，确保时间无误： sudo apt-get install ntpdatesudo ntpdate time.windows.com &ensp;在ntpdate.com 这一步遇到no server suitable for synchronization found运行命令：sudo ntpdate -buv 1.us.pool.ntp.org &ensp;然后将时间更新到硬件上：sudo hwclock –localtime –systohc(是两个小横，不是一个大横)]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Linux-解决mariadb安装失败]]></title>
    <url>%2Fposts%2Fa042bf99%2F</url>
    <content type="text"><![CDATA[mariadb 与 mysql 的区别：http://www.jb51.net/article/72416.htm 解决mariadb-server，mariadb-client安装失败 1.查看已安装的 mariadb相关包 将这些依赖包卸载sudo yum remove mariadb101u-configsudo yum remove mariadb101u-libs 新建mariadb的源文件sudo vim MariaDB.repo （建议取这个名字）输入以下内容（该源为清华源，国外源实在太慢）：[mariadb]name = MariaDBbaseurl = https://mirrors.ustc.edu.cn/mariadb/yum/10.1/centos7-amd64gpgkey=https://mirrors.ustc.edu.cn/mariadb/yum/RPM-GPG-KEY-MariaDBgpgcheck=1 4.安装sudo yum install MariaDB-server MariaDB-client 注意：If you don’t have the MariaDB GPG Signing key installed, YUM will prompt you to install it after downloading the packages (but before installing them). mariadb-server 和 mariadb-client 安装包http://yum.mariadb.org/10.1/centos7-amd64 http://yum.mariadb.org/10.1/centos7-amd64 rpms目录 和 srpms目录的区别RPMS中的软件包是直接可以用rpm来安装的,而SRPMS中的软件包是需要先编译在用rpm安装的 启动及配置mariadbhttps://www.linuxidc.com/Linux/2016-03/128880.htm 参考教程：https://www.jianshu.com/p/61e9cbd1b675https://mariadb.com/kb/en/library/yum/https://www.centos.bz/2017/12/%E5%AE%89%E8%A3%85mariadb%E9%80%9F%E5%BA%A6%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95-%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85%E6%BA%90/]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python-10-Web开发-网络爬虫教程-翻译版]]></title>
    <url>%2Fposts%2F2fc22776%2F</url>
    <content type="text"><![CDATA[最近想学爬虫，在网上搜索良久，终于找到一篇/良心的爬虫教程，但是教程用的是Python2，而我用的是Python3,顺便再加上我自己的理解，故称为翻译版，希望能帮到大家！参考教程：https://piaosanlang.gitbooks.io/spiders/01day/section1.1.html 爬虫入门至初级篇1.为什么要学爬虫抢票神器（360抢票器）： 先用软件注册一千个账号，然后生成一千个身份信息。 刷票前把这一千个账号批量登陆，cookie独立保存。 设置好区间跟车次，获取验证码。 识别验证码。 伪造订单数据直接提交服务器。 投票神器（微信朋友圈投票）： 原理应该是模拟出多个用户进行投票咨询报告：下阶段可以尝试对某个App的下载量跟踪饮食地图（NLP分析） 2.认识爬虫起源：搜索引擎发展趋势：抓取Ajax动态页面，需要解决以下问题 第一：JavaScript的交互分析和解释？ 第二：DOM事件的处理和解释分发？ 第三：动态DOM内容语义的抽取？ 本质： 浏览器Http请求 3.爬虫基本原理怎样理解HTTP协议传输的内容是明文的？《图解HTTP》 Http与Https的区别 数字证书及CA的扫盲介绍 4.HTTP代理神器Fiddler为什么必须关闭浏览器代理？因为代理的IP和端口冲突？其实我觉得用chrome的开发者工具也挺好的，可能是我对Fiddler还不够了解，毕竟网上有很多人都在推荐这个工具。 5.HTTP请求+HTTP响应感觉作者这两节讲得不错，把请求和响应的参数都说得很全。 6.学习使用Urllib2库urllib2、urllib.request、urllib3、requests的区别：http://blog.csdn.net/study_000/article/details/72764416 urllib.request.Request: This class is an abstraction of a URL request.request.urlopen:]]></content>
  </entry>
  <entry>
    <title><![CDATA[Python-11-Pycharm小技巧]]></title>
    <url>%2Fposts%2F7d10c5a7%2F</url>
    <content type="text"><![CDATA[Favotites： 可以查看断点 ycharm搜索导航之文件名、符号名搜索http://blog.csdn.net/u013088062/article/details/50323393 PyCharm中设置断点却不执行的原因https://jingyan.baidu.com/article/e75057f2eb1ec7ebc91a8985.html Pycharm如何实现变量的批量重命名Ctrl + R 替换Ctrl + Shift + F 全局查找Ctrl + Shift + R 全局替换 pycharm：格式化python代码ctrl+alt+L可以格式化 pycharm Tab键设置成4个空格https://www.cnblogs.com/Will-guo/p/6321843.html]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python-9-Logging日志模块介绍]]></title>
    <url>%2Fposts%2F9559a831%2F</url>
    <content type="text"><![CDATA[官方文档https://docs.python.org/3.5/library/logging.html 入门教程https://docs.python.org/3.5/howto/logging.html#logging-basic-tutorial 参考教程：http://blog.yubangweb.com/liao-liao-ri-zhi-zhe-jian-xiao-shi-qing/http://python.jobbole.com/86887/ 简介该模块定义了一系列函数和类(继承的是一个灵活的日志记录系统)来为应用程序和库的日志记录提供便利。 Logging模块的基类主要由以下几个模块组成：Loggers模块： expose the interface that application code directly uses.Handlers模块： send the log records (created by loggers) to the appropriate destination.Filters模块：provide a finer grained facility for determining which log records to output.Formatters模块：specify(指定) the layout of log records in the final output. 16.6.1. Logger 对象Logger对象有以下的属性和方法。注意Logger从不直接实例化，而是始终通过模块级函数 logging.getLogger(name)。getLogger()函数对同名的多个调用将始终返回对同一个Logger对象的引用。Logger的方法有很多，建议有需要上官方文档查询即可。 16.6.2. Logging 日志级别下图即是 Logging的日志级别。日志一般分为五个级别，分别是 DEBUG、INFO、WARNING、ERROR和CRITICAL。默认的级别是 WARNING。 16.6.3. Handler 对象Handler对象有以下的属性和方法。注意Handler从不直接实例化，该类主要作为其他更有用的子类的基类，但要注意，子类的 __init__() 需要调用 Handler的__init__(). Handler.init(level=NOTSET)Handler通过设置其级别来初始化实例，将过滤器列表设置为空列表，并创建一个锁（使用createLock()）来序列化对I / O机制的访问Handler的其他方法见官网。 下面的方法有需求再补充16.6.4. Formatter Objects 16.6.5. Filter Objects 16.6.6. LogRecord Objects 16.6.7. LogRecord attributes 16.6.8. LoggerAdapter Objects]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python-5-异常介绍]]></title>
    <url>%2Fposts%2F427be274%2F</url>
    <content type="text"><![CDATA[此篇文章是Python介绍的第五部分：异常介绍 Python的异常处理有两种方式，第一种是用 try…except捕获异常，并用日志记录或者用print()打印出来；第二种是用raise关键字显示抛出异常。两者的区别是是程序的后续代码能否在出现异常后仍然能够执行。 error end ### 后续代码print(‘end’)能够执行 ### 后续代码print(‘end’)不能执行 如果我们在程序中没有try或者raise异常，在程序出现错误时，程序也会抛出异常，其实是隐式地调用了raise。]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python-6-模块介绍]]></title>
    <url>%2Fposts%2F7ba23f82%2F</url>
    <content type="text"><![CDATA[在我的涉猎中，Python模块一般会涉及到这几个问题： 1 __init文件的作用\init__文件 可以区别文件夹是 Python模块还是 Python目录，Python模块可以被调用，目录不行。 不明白json模块的 loads等方法是写在 __init__文件中？ 2 import xxx 和 from xxx import x 和 import xxx as xx 的区别举个例子, 有个 hello.py 文件，假设 hello.py 可以当作模块使用，它的代码如下 有三种调用它的方法 1 import PythonTest.module_test.hello这种方法导入了 hello 模块的全部方法，如果 hello 模块包含方法较多，占用的内存会比较大 2 import PythonTest.module_test.hello as hello这种方法和 import PythonTest.module_test.hello 本质一样，都是导入所有方法，区别在于import PythonTest.module_test.hello as hello 给 PythonTest.module_test.hello 赋予了一个别名 hello，调用起来更方便，代码也更简洁 3 from PythonTest.module_test.hello import print_age从 PythonTest.module_test.hello 模块导入 print_age 方法，只导入单个方法，占用内存小很多 3 if.__name == ‘\main‘ 语句的作用该语句主要是用于代码测试。如上图的例子，当在命令行执行 python3 hello.py 时，会依次执行print_name、print_age、print_sex这三个方法，因为这时候 \name 等于 ‘\main‘，if 语句执行。反之，当你是调用而不是执行该模块时，\name 不等于 ‘\main__’，三个方法不会被执行，所以起到测试代码的作用。 4 global 关键字的用法]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python-4-数据结构介绍]]></title>
    <url>%2Fposts%2Fc6793824%2F</url>
    <content type="text"><![CDATA[此篇文章是Python介绍的第四部分：数据结构介绍 仅供参考哦！ dict 替换 key （dict[new_key] = value = dict.pop(key)）http://blog.csdn.net/jt674106399/article/details/76516186]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python-1-数据类型及字符串格式化介绍]]></title>
    <url>%2Fposts%2Fca0c3673%2F</url>
    <content type="text"><![CDATA[此篇文章是Python介绍的第一部分：数据类型及字符串格式化介绍。 Python 常见的数据类型有整型、浮点型及字符串。他们之间的转换可以通过 int（）、float（）、str（）这三个方法。 在实际的运用中，浮点数常常需要精度保留，这时 round（） 方法便发挥上用场。 >&gt;&gt; f = 1.234567>&gt;&gt; print(round(f, 2)) 1.23 另外，字符串的格式化也比较常见。 >&gt;&gt; i = 18>&gt;&gt; f = 40.0234>&gt;&gt; s = ‘John’>&gt;&gt; print(‘the age of %s is %d, his salary are %.2f’ % (s, i, f))the age of John is 18, his salary are 40.02 str()和repr()两个内建函数之间的差异：str()得到的字符串是面向用户的，具有较好的可读性repr()得到的字符串是面向机器的 >&gt;&gt; string = “Hello\tWill\n”>&gt;&gt; print(“%s” % string)>&gt;&gt; print(“%r” % string)Hello Will&ensp;‘Hello\tWill\n’ 参考教程https://www.cnblogs.com/wilber2013/p/4641616.html]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Linux-用户及用户组介绍]]></title>
    <url>%2Fposts%2Fae5c165a%2F</url>
    <content type="text"><![CDATA[简介：Linux 是一个多用户、多任务的操作系统。 用户及用户组概念介绍： https://www.cnblogs.com/jackyyou/p/5498083.html在使用Linux的过程中，我们一般不使用root用户来执行操作，因为root的权限太大，我们容易误删文件及其他操作，所以我们一般会新建多个用户来管理不同的任务。 本人同时拥有root用户及一个名为hadoop的用户，正常来讲，当你用adduser或者useradd来创建用户时，该用户（hadoop）在命令前加 sudo 是无效的，见下图。原因是你没有将这个用户加入到 sudoers 这份文件中。 将hadoop加入sudo用户组从实际操作上讲，将hadoop加入sudo用户组有两种方式： 第一是使用 vim 打开，但是在最后保存的时候他会提示这是只读文件，可以强制保存，但不知道有没有效vim /etc/sudoers 第二是使用 visudo 命令打开，这是系统规定的方式sudo visudo 打开文件后，我们可以看到如下内容： 可以看到，要让hadoop用户能够使用sudo命令，有两种方式： 第一是在 root ALL=(ALL) ALL 这条语句下添加hadoop ALL=(ALL) ALL 第二是将用户hadoop加到wheel用户组，因为这个用户组也拥有root权限 小提示：在安装Centos7系统的过程中，会出现如下界面，当你点击创建用户时，会让你输入用户名及密码，下面还有一个是否设置为管理员的选项。当你点击设置为管理员时，就会默认将该用户加到wheel组，所以能够使用sudo命令。 输入sudo命令免密码：如果你的用户是在wheel组，则将 sudoers文件中的 #%wheel ALL=(ALL) NOPASSWD: ALL 取消注释即可；如果不在，则仿照该格式添加即可。如下 hadoop ALL=(ALL) NOPASSWD: ALL 添加用户：https://www.linuxidc.com/Linux/2017-02/140794.htm sudoers 文件内容翻译：http://blog.csdn.net/a19881029/article/details/18730671 常见命令及文件说明：groups 查看当前登录用户的组内成员groups gliethttp 查看gliethttp用户所在的组,以及组内成员whoami 查看当前登录用户名 /etc/group文件包含所有组/etc/shadow和/etc/passwd系统存在的所有用户名 参考链接：https://www.cnblogs.com/jackyyou/p/5498083.html]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python-8-内建模块datetime介绍-转载]]></title>
    <url>%2Fposts%2Fe022544%2F</url>
    <content type="text"><![CDATA[转载链接：廖雪峰常用内建模块datetime 参考教程：Python中time模块与datetime模块在使用中的不同之处 时间模块的种类Python时间模块主要有 datetime 、time、 calendar 这三个，其中time比较接近底层，datetime是time的封装。 导入包 from datetime import datetime, timedelta, timezone 获取当前日期和时间 print(datetime.now())print(type(datetime.now())) # datetime 获取指定日期和时间 dt = datetime(2018, 2, 18, 17, 12, 54, 30000)print(dt, dt.year, dt.tzinfo) datetime转换为timestamp dt = datetime(2018, 2, 18, 17, 12, 54, 30000)print(dt.timestamp()) # 1518945174.03 timestamp转换为datetime# 注意到timestamp是一个浮点数，它没有时区的概念，而datetime是有时区的。上述转换是在timestamp和本地时间做转换。 t = 1518945174.03print(datetime.fromtimestamp(t))print(datetime.utcfromtimestamp(t)) # 差了8个小时 str转换为timestamp: str-&gt;datetime-&gt;timestamp%Y, %m, %d 代表的含义:https://zhidao.baidu.com/question/484985079.htmlhttps://docs.python.org/3/library/datetime.html#strftime-strptime-behavior s = ‘2018-02-18 17:12:54’sdt = datetime.strptime(s, ‘%Y-%m-%d %H:%M:%S’) # strptime记忆: str parse time so return datetimeprint(sdt)print(type(sdt)) # datetimestt = sdt.timestamp()print(stt) timestamp转换为str: timestamp-&gt;datetime-&gt;str tt = 1518945174.03tt2dt = datetime.fromtimestamp(tt)print(tt2dt)dt2str = datetime.strftime(tt2dt, ‘%Y-%m-%d %H:%M:%S’) # str_format_time, return strprint(dt2str)print(type(dt2str)) # str datetime 指定时区 tz_utc_8 = timezone(timedelta(hours=8))now = datetime.now()print(now)dt = now.replace(tzinfo=tz_utc_8)print(dt) tokyo_dt = dt.astimezone(timezone(timedelta(hours=9)))print(tokyo_dt) 练习： 假设你获取了用户输入的日期和时间如2015-1-21 9:01:30，以及一个时区信息如UTC+5:00，均是str，请编写一个函数将其转换为timestamp def str_to_timestamp(dt_str, tz_str): tz_num = int(tz_str[4:5]) tz_spec = timezone(timedelta(hours=tz_num)) dt = datetime.strptime(dt_str, ‘%Y-%m-%d %H:%M:%S’) dt_tz_spec = dt.replace(tzinfo=tz_spec) dt2tt = dt_tz_spec.timestamp() return dt2tt t1 = str_to_timestamp(‘2015-6-1 08:10:30’, ‘UTC+7:00’)print(t1) # 1433121030.0]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python-7-IO读写-open方法介绍]]></title>
    <url>%2Fposts%2Fbe6c44be%2F</url>
    <content type="text"><![CDATA[在Python的文件读写中，我们都会经常用到它的内置方法open()，以下就是该方法的简单介绍 环境Python3.5.4Centos7 def open(file, mode=’r’, buffering=None, encoding=None, errors=None, newline=None, closefd=True): 1.open() 默认写入 str 类型，如果想写入 bytes 类型，则mode需加上 ‘b’，除此之外，无法写入其它类型，如 int。2.open()默认以只读模式打开文件，且读取的数据格式一律为 str，不管之前写入的是否是bytes。3.参数说明：3.1 file：文件名称3.2 mode：模式，总分的话有read()、write()、append()三种模式，细分的话有12种。其中，write()会覆盖之前存在的内容，append()代表追加，会将新添加的内容放在原来内容的后面 此图来自菜鸟教程的“Python 文件I/O”教程，侵删 3.3 buffing：buffing主要用来设置缓存策略。当buffing为0时，代表关闭缓冲（仅在二进制模式下允许），当buffing为1时，代表行缓冲（只能在文本模式下使用）当buffing为一个大于1的整数时，表示一个固定大小的块缓冲区的大小。没有缓冲参数时给定，即buffering为None时，默认的缓冲策略如下： 二进制文件通常使用固定大小的块来缓冲;块的大小可以通过查看“io.DEFAULT_BUFFER_SIZE”。在很多系统上，缓冲区的长度通常为4096或8192字节。 “交互式”文本文件（isatty（）返回True的文件）使用行缓冲。其他文本文件使用上述二进制文件的策略。 3.4 encoding： 用于解码或者编码的编码集名称，比如utf-8等。默认编码依赖与本机平台。3.5 errors： is an optional string that specifies how encoding errors are to be handled—this argument should not be used in binary mode. Pass ‘strict’ to raise a ValueError exception if there is an encoding error (the default of None has the same effect), or pass ‘ignore’ to ignore errors.3.6 newline：控制选择哪种换行符。（仅适用于文本模式）。它可以是None，’’，’\ n’，’\ r’和’\ r \ n’。 4.open、io.open、codecs.open的区别https://zhidao.baidu.com/question/1823800427851275948.html 参考教程http://www.runoob.com/python/python-files-io.html]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python-7-序列化-json模块介绍]]></title>
    <url>%2Fposts%2Fbf4d5c4%2F</url>
    <content type="text"><![CDATA[环境Python3.5.4Pycharm 2016.3.3Centos7 在进行网络通信，或者Web开发时，经常用json作为数据交换语言，所以我们都不可避免地会涉及到json模块，以下是该模块的简单介绍。 在Pycharm中按住Ctrl键并用鼠标点击 json 模块，便可以查看 json 模块的源代码，我们可以看到该源代码都在json模块的init.py 中，包含dump、dumps、load、loads这四个方法。 看到这里，不免有人会觉得奇怪，为什么这四个方法是写在init.py这份文件中？请听我慢慢道来。 __init.py 文件的作用是将文件夹变为一个Python模块,Python 中的每个模块的包中，都有init__.py 文件。 通常init.py 文件为空，但是我们还可以为它增加其他的功能。我们在导入一个包时，实际上是导入了它的init.py文件。这样我们可以在init.py文件中批量导入我们所需要的模块，而不再需要一个一个的导入。所以这就是为什么 import json 后可以引用dump等方法。 欲知更多细节，请查看此文章：https://www.cnblogs.com/Lands-ljk/p/5880483.html 方法介绍 def dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None,default=None, sort_keys=False, **kw): 作用：将Python对象obj以JSON的格式序列化并存入文件对象fp obj: 要序列化的对象fp: 要存入的文件对象 >&gt;&gt;with open(“data.json”, “w”, encoding=”UTF-8”) as f_dump:…&ensp;&ensp;&ensp;&ensp; s_dump = json.dump({‘a’:’22’}, f_dump, ensure_ascii=False) skipkeys: 如果skipkeys=True，遇到不符合规范的keys（不是(str, int, float, bool, None)这些类型的），则会跳过该key，不会进行序列化。而如果 skipkeys=False，遇到不符合规范的keys则会报TypeError的错误。ensure_ascii: 如果ensure_ascii=False，则obj对象中的非ascii字符可以被序列化，反之则会被剔除。check_circular: 如果check_circular=False，那么容器类型的循环引用检查将被跳过，并且循环引用将导致OverflowError 循环引用举例import itertoolsfor i in itertools.count(): a = {} b = {“a”:a} a[“b”] = b它始终保持使用3.6 MB的RAM。 allow_nan: 首先，nan!=None；其次，nan = float(‘inf’) - float(‘inf’)；最后，float(‘inf’)是∞，一个比其他所有值都大的值。如果allow_nan为Flase， 序列化的对象包含nan、inf、-inf时则会抛出ValuError，如果为True则不会.>&gt;&gt; NaN = float(“NaN”) >&gt;&gt; a = {‘aa’:NaN} >&gt;&gt; import json >&gt;&gt; json.dumps(a)‘{“aa”: NaN}’>&gt;&gt;json.dumps(a, allow_nan=False)ValueError: Out of range float values are not JSON compliant indent: 序列化后的结果以多少个空格缩进,可以美化打印结果separators: 分隔符sort_keys: 如果sort_keys为true，则字典的输出将按键排序。cls: 如果要使用自定义的编码器，即自定义JSONEncoder子类，可以使用“cls“参数指定，，否则默认使用JSONEncoder。 dumps: 与dump方法类似，只不过dumps没有把序列后的对象存入文件，而是直接打印出来 def load(fp, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw): 作用：将文件对象fp中的内容反序列化为Python对象，例如dict fp: 要读取的文件对象cls: 用于自定义解码器object_hook: object_hook是一个可选函数，当任何对象（如dict）被解码/反序列化时，这个函数就会被调用。object_hook的返回值将被用来代替dict。此功能可用于实现自定义解码器 object_pairs_hook: object_pairs_hook是一个可选函数，当任何对象文本都使用‘有序列表对‘’进行解码时被调用，并使用object_pairs_hook的返回值来代替 dict。此功能可用于实现自定义解码器，这些解码器依赖于解码键和值对collections.OrderedDict()的顺序（例如， 会记住插入顺序）。如果定义object_pairs_hook的同时还定义了object_hook，则object_pairs_hook优先。 4.loads： 与load方法类似，只不过loadss反序列化的对象是字符串，而不是文件对象。 自定义解码器class Decoder(json.JSONDecoder): def decode(self, s): result = super().decode(s) # result = super(Decoder,self).decode(s) for Python 2.x return self._decode(result) def _decode(self, o): if isinstance(o, str) or isinstance(o, bytes): try: return int(o) except ValueError: return o elif isinstance(o, dict): return {k: self._decode(v) for k, v in o.items()} elif isinstance(o, list): return [self._decode(v) for v in o] else: return o &gt;&gt;&gt; c = &apos;{&quot;value&quot;: &quot;42&quot;}&apos; &gt;&gt;&gt; json.loads(c, cls=Decoder) {&apos;value&apos;: 42} 参考文章https://docs.python.org/3/library/json.htmlhttps://stackoverflow.com/questions/45068797/how-to-convert-string-int-json-into-real-int-with-json-loads]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python-2-常见的编码集介绍]]></title>
    <url>%2Fposts%2F152d2fee%2F</url>
    <content type="text"><![CDATA[此篇文章是Python介绍的第二部分：常见的编码集介绍。 在进行文件读写的过程中，我们不可避免地会遇到编码的问题，以下便是各种编码集的介绍，希望能为读者提供一定帮助。 位、字节、字符的区别：位：bytes，是存储的最小单位；字节：一个字节等于8位字符：根据编码的不同，一个字符有可能等于1个、2个或者4个及以上字节 常见的各种编码比较：ASCII：（American Standard Code for Information Interchange，美国信息交换标准代码），1967年正式发布。美国人首先对其英文字符进行了编码，也就是最早的ASCII码，用一个字节的低7位来表示英文的128个字符，最高位统一为0。ISO-8859-1： 单字节编码，向下兼容ASCII，其编码范围是0x00-0xFF，0x00-0x7F之间完全和ASCII一致，0x80-0x9F之间是控制字符，0xA0-0xFF之间是文字符号。ISO-8859-1收录的字符除ASCII收录的字符外，还包括西欧语言、希腊语、泰语、阿拉伯语、希伯来语对应的文字符号。GB2312-80/CP936： (GuoBiao)中华人民共和国国家标准简体中文字符集，1981年发布。共收录6763个汉字，覆盖99.75%的使用频率，但对于一些罕见字还不能处理。该编码对所收汉字进行分区处理，共计94个区，每个区包含94个汉字/字符。GBK： (GuoBiaoKuo)汉字内码扩展规范，1995年发布。GBK 只为“技术规范指导性文件”，不属于国家标准。GBK向下完全兼容GB2312-80编码，补充了GB2312-80编码缺少的一些罕见字。GB18030： 国家标准GB 18030-2005《信息技术 中文编码字符集》，2000年发布。向后兼容GBK，共收录汉字70244个。采用变长多字节编码，每个字可以由1个、2个或4个字节组成。Unicode： 1991年公布1.0版本。在Unicode出现之前，各国之间的编码都不尽相同，西方有ASCII、ISO-8859-1等编码，中国有GB2312等编码，各国之间通信容易出现乱码的问题，所以Unicode就应运而生了，将世界上所有的字符都纳入其中，每一个字符都给予独一无二的编码。UTF-8： （8-bit Unicode Transformation Format），1993年正式公布。是一种针对Unicode的可变长度字元编码。由于Unicode规定一个字符必须为两个字节，对于英文字符来说会增加一倍的存储空间，所以就出现了可变长的UTF-8。 Unicode到UTF8的转换规则：Unicode UTF-80000 - 007F 0xxxxxxx0080 - 07FF 110xxxxx 10xxxxxx0800 - FFFF 1110xxxx 10xxxxxx 10xxxxxx举例：已知“严”的Unicode是4E25（0100-1110-0010-0101），根据上表，可以发现4E25处在第三行的范围内（0800-FFFF），因此“严”的UTF-8编码需要三个字节，即格式是“1110xxxx 10xxxxxx 10xxxxxx”。然后，从“严”的最后一个二进制位开始，依次从后向前填入格式中的x，多出的位补0。这样就得到了“严”的UTF-8编码是“11100100-10111000- 10100101”，转换成十六进制就是E4B8A5。 英文字母和中文汉字在不同字符集编码下的字节数| 编码集 | 英文字母 | 中文汉字 || ———— | ———— | ———— || ASCII | 1字节 | 无法表示 || ISO-8859-1 | 1字节 | 1字节 || GB2312-80/CP936 | 1字节 | 2字节 || GBK | 1字节 | 2字节 || GB18030 | 1字节 | 2字节 || Unicode | 2字节 | 2字节 || UTF-8 | 1字节 | 3字节 || UTF-16 | 4字节 | 4字节 | 参考教程：维基百科在线编码转换工具英文字母和中文汉字在不同字符集编码下的字节数https://baijiahao.baidu.com/s?id=1570122036396262&amp;wfr=spider&amp;for=pchttp://blog.sina.com.cn/s/blog_6966650401013e9q.html]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python-3-str、bytes、unicode区别介绍]]></title>
    <url>%2Fposts%2F3af5ad4e%2F</url>
    <content type="text"><![CDATA[此篇文章是Python介绍的第三部分：str、bytes、unicode区别介绍。 环境Python3.5.4Centos7 1.在Python中也存在字节型数据（bytes）和字符型数据（unicode），不过这两者在Python2和Python3中却有点不同。Py2 和 Py3 都用 str 类型来表示字符串，不过在Py2中，str跟bytes是等价的；在Py3中，str跟unicode是等价的。另外，值得注意的是，在Py2中，bytes跟unicode是等价的；在Py3中则是不等的。详情见下图或者在Python命令行尝试。 Python2 Python3 2.除此之外，根据博主本人的理解，字节型转换为字符型可以理解为解码（decode），反之则是编码（encode）。下面只展示Python3的情况首先，我们可以通过 locale 来查看本机的默认编码方式，貌似Linux默认是utf-8，windows默认是gbk。 >&gt;&gt;import locale>&gt;&gt;locale.getpreferredencoding(False) 其次，我们将尝试 字符-&gt;字节 >&gt;&gt;a = ‘学习’>&gt;&gt;ae = a.encode(‘utf-8’)b’\xe5\xad\xa6\xe4\xb9\xa0’ 字节-&gt;字符 >&gt;&gt; ae.decode(‘utf-8’)‘学习’ 最后，因为在Py3中，字符串与unicode是等价的，所以字符串是没有decode方法的，如果调用该方法则会报错 >&gt;&gt; a.decode(‘utf-8’)Traceback (most recent call last): File ““, line 1, in AttributeError: ‘str’ object has no attribute ‘decode’]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python-11-Pycharm自定义模板]]></title>
    <url>%2Fposts%2Fc2547b03%2F</url>
    <content type="text"><![CDATA[Pycharm 设置位置：File-&gt;settings-&gt;Editor-&gt;File and Code Templates-&gt;Python Script 模板：#!/usr/bin/env python# -- coding: utf-8 --# @Time : ${DATE} ${TIME}# @Author : Aries# @Site : ${SITE}# @File : ${NAME}.py# @Software: ${PRODUCT_NAME} 可用的预定义文件模板变量：$ {PROJECT_NAME} - 当前项目的名称。$ {NAME} - 在文件创建过程中在“新建文件”对话框中指定的新文件的名称。$ {USER} - 当前用户的登录名。$ {DATE} - 当前的系统日期。$ {TIME} - 当前系统时间。$ {YEAR} - 今年。$ {MONTH} - 当月。$ {DAY} - 当月的当天。$ {HOUR} - 目前的小时。$ {MINUTE} - 当前分钟。$ {PRODUCT_NAME} - 将在其中创建文件的IDE的名称。$ {MONTH_NAME_SHORT} - 月份名称的前3个字母。 示例：1月，2月等$ {MONTH_NAME_FULL} - 一个月的全名。 示例：1月，2月等 参考链接：https://www.cnblogs.com/mat-wu/p/7130358.htmlhttps://www.cnblogs.com/ajmd/p/6239146.html]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python-10-Web开发-Nginx的简单介绍]]></title>
    <url>%2Fposts%2Fd7e5ae52%2F</url>
    <content type="text"><![CDATA[环境Centos7Nginx 1.12.2 介绍nginx [engine x]是最初由Igor Sysoev编写的HTTP和反向代理服务器，邮件代理服务器和通用TCP / UDP代理服务器。 参考教程http://www.linuxidc.com/Linux/2017-04/142986.htmhttp://nginx.org/en/docs/beginners_guide.html 安装 wget http://dl.Fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpmsudo rpm -ivh epel-release-latest-7.noarch.rpmsudo yum install nginx -y 测试 输入 systemctl start nginx 启动 nginx 在浏览器输入 nginx 服务器的IP 地址，一般为 localhost，出现此页面即安装成功 nginx 常用命令(其中 -s 是 signal 的缩写，意思是 nginx 可以通过 quit、stop 这些信号来控制 nginx ) 启动：systemctl start nginxsudo nginx&ensp;重启： systemctl restart nginx&ensp;停止：systemctl stop nginxsudo nginx -s quit(优雅地关机)sudo nginx -s stop(快速关机)&ensp;检查状态： systemctl status nginx&ensp;开机自启： systemctl enable nginx&ensp;重新加载配置文件：sudo nginx -s reload nginx 的权限问题 本文所安装的 nginx 是由 root 安装的（sudo），所以在执行nginx命令的时候需要系统服务管理指令 systemctl 来执行，否则就很容易报权限不足的错误。 由于Centos7默认开启 SELinux 服务，这个服务对权限的把控很严格，所以需要先把它关了，这是报权限不足的主要原因。 nginx 配置文件及目录说明注：通过输入 rpm -ql nginx 便可查看安装nginx 所生成的文件 /etc/nginx/nginx.conf： nginx 配置主文件，默认情况下，该配置文件被命名nginx.conf ，并放入目录 /usr/local/nginx/conf， /etc/nginx或 /usr/local/etc/nginx。 /etc/nginx/nginx.conf.default : 关于nginx 如何配置的参考文件 /etc/nginx/conf.d 和 /etc/nginx/default.d：这两个的共同作用是 放置模块化配置文件，但什么是模块化配置文件呢？就是当你要配置的server 或者 location 比较多的时候，如果全部都放在 nginx.conf 这份文件的话，就会显得很臃肿，这时就可以把这些配置文件放在这两个目录，再通过include命令包含进来，那他们的区别在哪呢？ 在 nginx.conf 这份配置文件中，字段是分为几个级别的，其中 main &gt; events、http；而 http &gt; server &gt; location，由图可得，第一个include （conf.d）与server 是同级别的，第二个 include （default.d）是与location 同级别的，所以在 conf.d 存放server， 在default.d存放 location ，这就是它们的区别。 /usr/share/nginx/html/index.html ： 上图启动页面的HTML文件，是 index.html 的默认存放位置]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Android-Studio版本更新]]></title>
    <url>%2Fposts%2F63e75df2%2F</url>
    <content type="text"><![CDATA[1 环境旧环境：win10 64bit Android Studio1.5 gradle1.5.0 API23新环境：win10 64bit Android Studio3.0 gradle3.0.0 API23 2 Android Studio 3.0 简介http://blog.csdn.net/tz_zs/article/details/72728179 3 下载http://blog.csdn.net/DickyQie/article/details/78136337 （推荐）https://developer.android.google.cn/studio/preview/index.html 4 安装（已安装其他版本/无安装其他版本）http://www.jianshu.com/p/fbac2dbd81bc AS3.0 主要亮点是支持Kotlin，以下是Kotlin的相关内容: 谷歌大牛说：为什么 Kotlin 比你们用的那些垃圾语言都好 Android Studio配置Kotlin开发环境]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[导入Ghost-Android工程]]></title>
    <url>%2Fposts%2F6b9a598%2F</url>
    <content type="text"><![CDATA[背景&ensp;&ensp;导入Ghost-Android工程后，相关的 依赖包/插件 一直没有下载成功，反复重启AS+通宵下载 后，发现可能是[ ‘com.crashlytics.sdk.android:answers:1.3.7@aar’] 这个包下载不成功导致其他包也下载不成功。 将这个依赖注释后重新下载，其他包下载成功！ &ensp;&ensp;虽然将这个依赖注释后重新下载，其他包能下载成功，但还是没办法运行Ghost-Android工程，最后尝试取消注释，重新下载，居然成功了，猜想是代理不稳定导致的。 Ghost-Android github地址https://github.com/TryGhost/Ghost-Android 查看下载的依赖包 C:\Users\hongxin.gradle\caches\modules-2\files-2.1 (我的路径) @aar 和 transitive = true 的含义https://stackoverflow.com/questions/44902339/whats-the-meaning-of-aar-with-transitive-true 一文读懂Gradlehttp://android.walfud.com/tag/android/]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[搭建个人博客(三)-Atom编辑器+七牛云图床]]></title>
    <url>%2Fposts%2F63e92f23%2F</url>
    <content type="text"><![CDATA[背景：本篇文章主要讲述的是采用 Hexo+Github+Next 框架搭建个人博客后，图床和编辑器的选择及相关介绍。为什么要选择编辑器呢？当然是为了提高博客的访问速度。图床的选择其实比较简单，因为网上大多数人都推荐七牛云，主要是它有10GB免费存储空间等福利为什么要选择编辑器呢？当然是为了节省时间。如果没有合适的编辑器，则每次写博客都要先上传图片到七牛云，再一个个地复制图片链接到文章中，这显然浪费了很多时间。经过层层筛选，博主最终选择了 Atom 这个编辑器，通过下载几个插件，就可以实现边写文字边上传图片的功能了，岂不乐哉！ 以下主要是关于 Atom 的介绍： 1.在Atom下配置七牛云作为图床参考http://blog.csdn.net/shunxiangl/article/details/75944126http://blog.csdn.net/qq_31915279/article/details/61824114 注：1.1 博主因为配置了代理，所以下载插件时不会出现下载不成功的情况。1.2 要想上传图片到七牛云，必须绑定你自己的域名或者用七牛云的测试域名，如果用七牛云的测试域名，则新建的存储空间必须是公开的。1.3 要想实现上传图片，必须先截图，再Ctrl+C，Ctrl+V，而不能单纯复制粘贴你下载好的图片。 2.Atom 汉化 http://blog.csdn.net/u013366098/article/details/505687793.Atom 与 Hexo 的结合再一次体验到 Atom 的强大之处，因为它竟然支持 Hexo 等框架，只需下载 markdown-writer 插件就可实现与 Hexo 的对接，再一次节省了写博客的时间！参考教程：http://blog.csdn.net/u010494080/article/details/53562939]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux-后台运行Python程序]]></title>
    <url>%2Fposts%2Fd2553b91%2F</url>
    <content type="text"><![CDATA[方式一：nohup 命令 该命令会在后台执行 main.py 这个程序，并将输出结果保存到 nohup.out 文件 nohup python main.py &amp; 将输出结果更改到 filename.out 文件。 nohup python main.py &gt;filename.out 2&gt;&amp;1 &amp; 查看后台运行的任务 jobs nohup命令解释https://www.cnblogs.com/zq-inlook/p/3577003.html 方式二：https://www.ibm.com/developerworks/cn/linux/l-cn-nohup/]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu16.04安装virtualbox]]></title>
    <url>%2Fposts%2F704f0bbb%2F</url>
    <content type="text"><![CDATA[1.virtualbox版本：virtualbox-5.1_5.1.4-110228-Ubuntu-xenial_amd64.deb 2.virtualbox安装文档地址：https://www.virtualbox.org/manual/UserManual.html 3.安装 4.报错：vboxdrv 构建失败vboxdrv介绍：为了在主操作系统旁边的虚拟机中运行其他操作系统，VirtualBox需要非常紧密地集成到系统中。要做到这一点，它会安装一个名为“驱动程序”的模块vboxdrv，该模块在系统内核中进行大量工作，这是控制处理器和物理硬件的操作系统的一部分。没有这个内核模块，你仍然可以使用VirtualBox管理器来配置虚拟机，但是它们不会启动。它还安装了调用的网络驱动程序 vboxnetflt， vboxnetadp哪些虚拟机可以更好地利用计算机的网络功能，而且超出基本“NAT”模式的虚拟机网络需要。 在执行 sudo dpkg -i virtualbox-5.1_5.1.4-110228-Ubuntu-xenial_amd64.deb这条命令时，安装程序将尝试构建适合当前运行的内核的内核模块。如果构建过程不成功，您将看到一个警告，该包将被取消配置 解决步骤：（不要盲目执行本教程代码，建议阅读全文后再考虑如何执行）1.查看有没有安装正确的头文件查看内核版本： 对于Debian和基于Ubuntu的发行版，您必须安装 linux-headers，通常取的linux-headers-generic ，linux-headers-amd64 ，linux-headers-i686 或linux-headers-i686-pae 这些头文件的正确版，版本名最好与内核版本名称相匹配; 头文件一般放在/usr/src 目录下如图，该头文件已正确安装（我是自动安装的），如果相应的头文件没安装，可参考下面的教程：https://linux.cn/article-4625-1.html#3_1245 2.查看/var/log/vbox-install.log为什么编译失败 通过Google和百度，网上大部分资料都指向“内核没编译”，但是因为对内核不熟，所以没敢尝试，也建议不要随便编译内核，以下是我查找的资料报错解决办法：http://hanjiangduqiao.blog.163.com/blog/static/613105442012320558430/http://blog.csdn.net/chenbang110/article/details/7795011 （就是这个教程说内核没编译）http://www.linuxdiyf.com/viewarticle.php?id=314763 (这个教程说要进入 /usr/src/kernels/linux-3.6.2 目录，但是我发现我电脑并没有kernels这个目录，所以没尝试) 内核编译：https://kernelnewbies.org/FAQ/KernelCompilationhttp://www.linuxprobe.com/linux-kernel-compilation.htmlhttp://www.cnblogs.com/super119/archive/2011/01/03/1924408.html看起来比较有用的http://forum.ubuntu.org.cn/viewtopic.php?t=42690 3.安装Qt 5.3.2以上（推荐Qt 5.6.2以上）和 SDL 1.2.7或更高版本（此图形库通常称为 libsdl或类似）突然在官网教程发现要安装这两个包，但是我并没有，这个对系统影响较小，所以先试试这个。 查看qt版本：qmake -v但有时候安装完成执行此命令还是报错解决办法：http://blog.csdn.net/zhuquan945/article/details/52818786 qt5.7安装教程https://qtguide.ustclug.org/ch01-04.htmhttp://blog.csdn.net/u012235003/article/details/71195046 （我用这个安装） 下载包：wget http://download.qt.io/official_releases/qt/5.7/5.7.0/qt-opensource-linux-x64-5.7.0.run下载后给执行权限: chmod +x qtxxxx.run安装 : ./qtxxxx.run安装g++: sudo apt-get install build-essential安装依赖库: sudo apt-get install libfontconfig1安装OpenGL: sudo apt-get install mesa-common-dev以及依赖: sudo apt-get install libglu1-mesa-dev -y配置: 打开qt creator 工具-&gt;选项-&gt;构建&amp;运行-&gt;编译，选择编译器 SDL安装SDL1.0安装：http://www.linuxidc.com/Linux/2010-07/26965.htmSDL2.0安装：http://wiki.libsdl.org/Installation 痛心：安装qt5和SDL后还是报错 4.重新Google报错原因http://blog.csdn.net/jingtiangao/article/details/51811638https://askubuntu.com/questions/762254/why-do-i-get-required-key-not-available-when-install-3rd-party-kernel-modules （这一篇的第二个答案（点赞量14）之前试过，曾经能启动，但后来又不行了） 根本原因：从内核版本4.4.0-20开始，如果启用了UEFI Secure Boot，强制执行未启用安全启动的未签名内核模块将不允许运行解决办法：在BIOS里面关闭安全启动在执行 sudo rcvboxdrv setup 重新编译]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[搭建个人博客(二)- Next主题配置]]></title>
    <url>%2Fposts%2F7879e99d%2F</url>
    <content type="text"><![CDATA[本文是上一篇文章 “ Hexo+Github+Next 搭建个人博客(一)”的延续，主要讲述自己在配置 Next 主题时遇到的一些问题，是已经假设你已经搭好环境的情况下，如果对环境搭建还有不懂的地方，请看上一篇文章哦。 文档http://theme-next.iissnan.com/getting-started.htmlhttps://hexo.io/zh-cn/docs/index.html 遇到的问题1.添加栏目如下图， 在添加栏目时需定义路径和图标，图标既可在 menu 这里定义 (符号|| 后面就是图标的名称 )也可以在 menu_icons 定义。该图标是到 http://fontawesome.io/icons/ 这个网站找的。 2.添加社交链接一般情况下在 Next 的配置文件是不会定义中文字体的，中文字体都是定义在 /languages/zh-Hans.yml 文件下，但是我在 /languages/zh-Hans.yml 定义后，还是不会显示“简书”，“知乎”的中文，最后是直接在 配置文件 定义才行，如下图。 一般情况下，配置到这里，整个博客的样子也应该出来了，但问题总是有的… 3.点击 ”关于“ 显示 ”Cannot GET /about/“这是因为你没有新建页面（page）的缘故，需键入下面命令，键入后在source文件夹下会对应生成 “about” 文件夹 和 index.md 文件，index.md 便是你显示的页面了。之后你便可以肆无忌惮的写文章了。 hexo new page about 4.显示分类的效果，如下图 该效果需要以下三个步骤： # 1.新建页面hexo new page categories&ensp; # 2.添加 type 和 comments-–title: 分类date: 2018-01-13 11:12:25type: “categories”comments: false-–&ensp;3.在文章添加分类 5.部署 Hexo 时设置免密码，节省时间设置 SSH 使用 hexo deploy 时免输用户名密码 6.安装 HexoEditor官方地址：https://github.com/zhuzhuyule/HexoEditor/blob/master/doc/en/Building.md淘宝镜像： https://npm.taobao.org/ # If In China China China, you can set mirror to speed up !npm config set registry “https://registry.npm.taobao.org“npm config set electron_mirror “https://npm.taobao.org/mirrors/electron/“ # 克隆项目git clone https://github.com/zhuzhuyule/HexoEditor.git # 使用淘宝定制cnpm， 用npm下载总会出错sudo npm install -g cnpm –registry=https://registry.npm.taobao.org cd HexoEditorsudo cnpm installsudo cnpm start 7.更换Google字体更换Google字体主要是它影响了站点的访问速度，对于这个问题，有几种解决办法： 换国内源，比如使用 360 CDN Google 字体库(貌似挂了)、科大 CDN Google 字体库(懒人推荐) 使用本地 Google Fonts 8.字数，阅读时长统计hexo-wordcount实现文章标题栏显示更多的文章信息 9.进阶教程hexo 摸爬滚打之进阶教程Hexo+NexT主题配置备忘Hexo博客优化，如何加快你的博客访问速度(精)]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建个人博客(一)-框架选择及小尝试]]></title>
    <url>%2Fposts%2Fe170b827%2F</url>
    <content type="text"><![CDATA[环境Centos7 参考教程 Github 搭建 Hexo 静态博客 上面的教程采用的是 Hexo + Github + Yilia 主题，但本人在采用 Yilia 主题出现了一点问题，所以最后采用的是 Next 主题。以下是自己遇到的一些问题及解决办法 Hexo 框架1.在/etc/profle 配置了node.js 的路径，用“sudo npm install …” 提示 “sudo npm 找不到命令“ 原因：当 sudo以管理权限执行命令的时候，Linux将PATH环境变量进行了重置，当然这主要是因为系统安全的考虑,所以会找不到该路径。 解决办法（路径要更改为自己的）： sudo ln -s /usr/local/node-v8.9.3/bin/node /usr/bin/nodesudo ln -s /usr/local/node-v8.9.3/lib/node_modules /usr/lib/nodesudo ln -s /usr/local/node-v8.9.3/bin/npm /usr/bin/npm 参考： https://www.cnblogs.com/ishell/p/4333763.html 2.让 hexo server 后台运行http://www.tuijiankan.com/2015/05/08/hexo-forever-run/ yilia主题1 采用 yilia 主题的博客http://litten.me/http://zbk1nger.github.io/ 2 采用 yilia 主题时图片的路径问题 如图，我在 yilia 的配置文件分别配置了三张图片：支付宝、微信的收款码和个人头像。上图的 /img 文件夹 注意是要放在 根目录下的 source 文件夹下，再通过以下这三条命令生成便可预览。 hexo clean # 清除缓存hexo g # 生成静态文件hexo s # 启动服务器预览 3 yilia 主题发布的文章 在主页显示时 文章的内容 会全部显示，个人觉得那样很长很难看，所以想要部分展示的效果，类似于这样 解决办法：在文章需要截断的位置加上 more 标签，如下图 但是添加标签后出现了上图的效果，与“展开全文”重复，而且也不好看，本人没学过前端，故最后切换成 Next 主题。 Next主题Next 主题的配置见本人的下一篇博客 “搭建个人博客(二)- Next主题配置”。 其它链接搭建个人博客，你需要知道这些https://zhuanlan.zhihu.com/p/25744686 好看的 Hexo 主题https://www.zhihu.com/question/24422335]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>博客</tag>
      </tags>
  </entry>
</search>
